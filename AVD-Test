Terraform scripts and set up a GitHub Actions pipeline to provision an Amazon EKS cluster, along with a VPC and networking resources, following best practices for security and scalability.

1. Terraform Scripts for EKS, VPC, and Networking
File: main.tf
provider "aws" {
  region = "us-west-2"
}

# Create VPC
module "vpc" {
  source  = "terraform-aws-modules/vpc/aws"
  version = "3.0.0"
  name    = "eks-vpc"
  cidr    = "10.0.0.0/16"

  azs             = ["us-west-2a", "us-west-2b", "us-west-2c"]
  private_subnets = ["10.0.1.0/24", "10.0.2.0/24", "10.0.3.0/24"]
  public_subnets  = ["10.0.101.0/24", "10.0.102.0/24", "10.0.103.0/24"]

  enable_nat_gateway = true
  single_nat_gateway = true

  tags = {
    Name = "eks-vpc"
  }
}

# Create EKS Cluster
module "eks" {
  source          = "terraform-aws-modules/eks/aws"
  cluster_name    = "my-eks-cluster"
  cluster_version = "1.26"
  subnets         = module.vpc.private_subnets
  vpc_id          = module.vpc.vpc_id

  node_groups = {
    eks_nodes = {
      desired_capacity = 3
      max_capacity     = 5
      min_capacity     = 1

      instance_type = "t3.medium"
    }
  }

  tags = {
    Name = "eks-cluster"
  }
}

output "cluster_endpoint" {
  value = module.eks.cluster_endpoint
}

output "cluster_security_group_id" {
  value = module.eks.cluster_security_group_id
}

output "node_group_role_arn" {
  value = module.eks.node_groups["eks_nodes"].iam_role_arn
}
File: variables.tf
variable "region" {
  description = "AWS region"
  default     = "us-west-2"
}

variable "cluster_name" {
  description = "EKS cluster name"
  default     = "my-eks-cluster"
}

variable "node_instance_type" {
  description = "EC2 instance type for EKS worker nodes"
  default     = "t3.medium"
}
File: outputs.tf
output "eks_cluster_name" {
  value = module.eks.cluster_name
}

output "vpc_id" {
  value = module.vpc.vpc_id
}
2. Security Best Practices
Use IAM Roles: Ensure that your EKS worker nodes and control plane have the appropriate IAM roles with least privilege.
Enable Encryption: Use KMS encryption for sensitive resources like secrets and storage.
Private Subnets: Ensure that your EKS worker nodes run inside private subnets to avoid direct internet exposure.
3. GitHub Actions Pipeline for GitOps
File: .github/workflows/terraform.yml
name: 'Terraform Apply'

on:
  push:
    branches:
      - main

jobs:
  terraform:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write
      secrets: write

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      run: terraform plan

    - name: Terraform Apply
      run: terraform apply -auto-approve

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
4. GitOps Best Practices
Environment Separation: Use multiple branches like dev, stage, and prod with GitHub environments to manage different stages of your infrastructure lifecycle.
